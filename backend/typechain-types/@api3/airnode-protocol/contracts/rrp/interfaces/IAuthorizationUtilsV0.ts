/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IAuthorizationUtilsV0Interface extends utils.Interface {
  functions: {
    "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address)": FunctionFragment;
    "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkAuthorizationStatus"
      | "checkAuthorizationStatuses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAuthorizationStatus",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAuthorizationStatuses",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAuthorizationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAuthorizationStatuses",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAuthorizationUtilsV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAuthorizationUtilsV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAuthorizationStatus(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      endpointId: PromiseOrValue<BytesLike>,
      sponsor: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    checkAuthorizationStatuses(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestIds: PromiseOrValue<BytesLike>[],
      endpointIds: PromiseOrValue<BytesLike>[],
      sponsors: PromiseOrValue<string>[],
      requesters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { statuses: boolean[] }>;
  };

  checkAuthorizationStatus(
    authorizers: PromiseOrValue<string>[],
    airnode: PromiseOrValue<string>,
    requestId: PromiseOrValue<BytesLike>,
    endpointId: PromiseOrValue<BytesLike>,
    sponsor: PromiseOrValue<string>,
    requester: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkAuthorizationStatuses(
    authorizers: PromiseOrValue<string>[],
    airnode: PromiseOrValue<string>,
    requestIds: PromiseOrValue<BytesLike>[],
    endpointIds: PromiseOrValue<BytesLike>[],
    sponsors: PromiseOrValue<string>[],
    requesters: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  callStatic: {
    checkAuthorizationStatus(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      endpointId: PromiseOrValue<BytesLike>,
      sponsor: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkAuthorizationStatuses(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestIds: PromiseOrValue<BytesLike>[],
      endpointIds: PromiseOrValue<BytesLike>[],
      sponsors: PromiseOrValue<string>[],
      requesters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;
  };

  filters: {};

  estimateGas: {
    checkAuthorizationStatus(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      endpointId: PromiseOrValue<BytesLike>,
      sponsor: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAuthorizationStatuses(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestIds: PromiseOrValue<BytesLike>[],
      endpointIds: PromiseOrValue<BytesLike>[],
      sponsors: PromiseOrValue<string>[],
      requesters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAuthorizationStatus(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestId: PromiseOrValue<BytesLike>,
      endpointId: PromiseOrValue<BytesLike>,
      sponsor: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAuthorizationStatuses(
      authorizers: PromiseOrValue<string>[],
      airnode: PromiseOrValue<string>,
      requestIds: PromiseOrValue<BytesLike>[],
      endpointIds: PromiseOrValue<BytesLike>[],
      sponsors: PromiseOrValue<string>[],
      requesters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
