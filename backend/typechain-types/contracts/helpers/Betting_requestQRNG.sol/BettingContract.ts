/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace BettingContract {
  export type BetStruct = {
    betId: PromiseOrValue<BigNumberish>;
    playerAddress: PromiseOrValue<string>;
    playerHand: PromiseOrValue<BigNumberish>;
    playerGuess: PromiseOrValue<BigNumberish>;
    betAmount: PromiseOrValue<BigNumberish>;
    houseHand: PromiseOrValue<BigNumberish>;
    requestId: PromiseOrValue<BytesLike>;
    taskId: PromiseOrValue<BytesLike>;
    winner: PromiseOrValue<string>;
  };

  export type BetStructOutput = [
    BigNumber,
    string,
    number,
    number,
    number,
    number,
    string,
    string,
    string
  ] & {
    betId: BigNumber;
    playerAddress: string;
    playerHand: number;
    playerGuess: number;
    betAmount: number;
    houseHand: number;
    requestId: string;
    taskId: string;
    winner: string;
  };
}

export interface BettingContractInterface extends utils.Interface {
  functions: {
    "BET_FEE()": FunctionFragment;
    "GUESS_EVEN()": FunctionFragment;
    "GUESS_ODD()": FunctionFragment;
    "MAX_FFC_BET()": FunctionFragment;
    "MAX_HAND()": FunctionFragment;
    "MIN_FFC_BET()": FunctionFragment;
    "MIN_HAND()": FunctionFragment;
    "airnode()": FunctionFragment;
    "airnodeRrp()": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "checker()": FunctionFragment;
    "endpointIdUint256()": FunctionFragment;
    "executeTask()": FunctionFragment;
    "flyFlutterCoinContract()": FunctionFragment;
    "fulfillUint256(bytes32,bytes)": FunctionFragment;
    "houseContract()": FunctionFragment;
    "oddsAndEvenContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBet(uint8,uint8,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFlyFlutterCoinContract(address)": FunctionFragment;
    "setHouseContract(address)": FunctionFragment;
    "setOddsAndEvenContract(address)": FunctionFragment;
    "setRequestParameters(address,bytes32,address)": FunctionFragment;
    "sponsorWallet()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "waitingCloseBet(bytes32)": FunctionFragment;
    "waitingFulfillment(bytes32)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BET_FEE"
      | "GUESS_EVEN"
      | "GUESS_ODD"
      | "MAX_FFC_BET"
      | "MAX_HAND"
      | "MIN_FFC_BET"
      | "MIN_HAND"
      | "airnode"
      | "airnodeRrp"
      | "bets"
      | "checker"
      | "endpointIdUint256"
      | "executeTask"
      | "flyFlutterCoinContract"
      | "fulfillUint256"
      | "houseContract"
      | "oddsAndEvenContract"
      | "owner"
      | "placeBet"
      | "renounceOwnership"
      | "setFlyFlutterCoinContract"
      | "setHouseContract"
      | "setOddsAndEvenContract"
      | "setRequestParameters"
      | "sponsorWallet"
      | "transferOwnership"
      | "waitingCloseBet"
      | "waitingFulfillment"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BET_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GUESS_EVEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GUESS_ODD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_FFC_BET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_HAND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_FFC_BET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_HAND", values?: undefined): string;
  encodeFunctionData(functionFragment: "airnode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airnodeRrp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flyFlutterCoinContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillUint256",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "houseContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oddsAndEvenContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFlyFlutterCoinContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHouseContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOddsAndEvenContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestParameters",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "waitingCloseBet",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "waitingFulfillment",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BET_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUESS_EVEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUESS_ODD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FFC_BET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_HAND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FFC_BET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_HAND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airnode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flyFlutterCoinContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "houseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oddsAndEvenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlyFlutterCoinContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHouseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOddsAndEvenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waitingCloseBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waitingFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "BetPlaced(uint256,address,uint8,uint8,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedUint256(bytes32,uint8)": EventFragment;
    "RequestedUint256(bytes32)": EventFragment;
    "TaskCreated(bytes32)": EventFragment;
    "TaskExecuted(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedUint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskExecuted"): EventFragment;
}

export interface BetPlacedEventObject {
  newBetId: BigNumber;
  player: string;
  playerHand: number;
  playerGuess: number;
  betAmount: number;
}
export type BetPlacedEvent = TypedEvent<
  [BigNumber, string, number, number, number],
  BetPlacedEventObject
>;

export type BetPlacedEventFilter = TypedEventFilter<BetPlacedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedUint256EventObject {
  requestId: string;
  houseHand: number;
}
export type ReceivedUint256Event = TypedEvent<
  [string, number],
  ReceivedUint256EventObject
>;

export type ReceivedUint256EventFilter = TypedEventFilter<ReceivedUint256Event>;

export interface RequestedUint256EventObject {
  requestId: string;
}
export type RequestedUint256Event = TypedEvent<
  [string],
  RequestedUint256EventObject
>;

export type RequestedUint256EventFilter =
  TypedEventFilter<RequestedUint256Event>;

export interface TaskCreatedEventObject {
  taskId: string;
}
export type TaskCreatedEvent = TypedEvent<[string], TaskCreatedEventObject>;

export type TaskCreatedEventFilter = TypedEventFilter<TaskCreatedEvent>;

export interface TaskExecutedEventObject {
  taskId: string;
}
export type TaskExecutedEvent = TypedEvent<[string], TaskExecutedEventObject>;

export type TaskExecutedEventFilter = TypedEventFilter<TaskExecutedEvent>;

export interface BettingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BettingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BET_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GUESS_EVEN(overrides?: CallOverrides): Promise<[BigNumber]>;

    GUESS_ODD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FFC_BET(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_HAND(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FFC_BET(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_HAND(overrides?: CallOverrides): Promise<[BigNumber]>;

    airnode(overrides?: CallOverrides): Promise<[string]>;

    airnodeRrp(overrides?: CallOverrides): Promise<[string]>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        number,
        number,
        number,
        number,
        string,
        string,
        string
      ] & {
        betId: BigNumber;
        playerAddress: string;
        playerHand: number;
        playerGuess: number;
        betAmount: number;
        houseHand: number;
        requestId: string;
        taskId: string;
        winner: string;
      }
    >;

    checker(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    endpointIdUint256(overrides?: CallOverrides): Promise<[string]>;

    executeTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flyFlutterCoinContract(overrides?: CallOverrides): Promise<[string]>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    houseContract(overrides?: CallOverrides): Promise<[string]>;

    oddsAndEvenContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBet(
      playerHand: PromiseOrValue<BigNumberish>,
      playerGuess: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFlyFlutterCoinContract(
      _flyFlutterCoinContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHouseContract(
      _houseContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOddsAndEvenContract(
      _oddsAndEvenContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    waitingCloseBet(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BET_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  GUESS_EVEN(overrides?: CallOverrides): Promise<BigNumber>;

  GUESS_ODD(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FFC_BET(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_HAND(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FFC_BET(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_HAND(overrides?: CallOverrides): Promise<BigNumber>;

  airnode(overrides?: CallOverrides): Promise<string>;

  airnodeRrp(overrides?: CallOverrides): Promise<string>;

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      number,
      number,
      number,
      number,
      string,
      string,
      string
    ] & {
      betId: BigNumber;
      playerAddress: string;
      playerHand: number;
      playerGuess: number;
      betAmount: number;
      houseHand: number;
      requestId: string;
      taskId: string;
      winner: string;
    }
  >;

  checker(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  endpointIdUint256(overrides?: CallOverrides): Promise<string>;

  executeTask(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flyFlutterCoinContract(overrides?: CallOverrides): Promise<string>;

  fulfillUint256(
    requestId: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  houseContract(overrides?: CallOverrides): Promise<string>;

  oddsAndEvenContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBet(
    playerHand: PromiseOrValue<BigNumberish>,
    playerGuess: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFlyFlutterCoinContract(
    _flyFlutterCoinContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHouseContract(
    _houseContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOddsAndEvenContract(
    _oddsAndEvenContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequestParameters(
    _airnode: PromiseOrValue<string>,
    _endpointIdUint256: PromiseOrValue<BytesLike>,
    _sponsorWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sponsorWallet(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  waitingCloseBet(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  waitingFulfillment(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BET_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    GUESS_EVEN(overrides?: CallOverrides): Promise<BigNumber>;

    GUESS_ODD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FFC_BET(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_HAND(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FFC_BET(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_HAND(overrides?: CallOverrides): Promise<BigNumber>;

    airnode(overrides?: CallOverrides): Promise<string>;

    airnodeRrp(overrides?: CallOverrides): Promise<string>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        number,
        number,
        number,
        number,
        string,
        string,
        string
      ] & {
        betId: BigNumber;
        playerAddress: string;
        playerHand: number;
        playerGuess: number;
        betAmount: number;
        houseHand: number;
        requestId: string;
        taskId: string;
        winner: string;
      }
    >;

    checker(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    endpointIdUint256(overrides?: CallOverrides): Promise<string>;

    executeTask(overrides?: CallOverrides): Promise<boolean>;

    flyFlutterCoinContract(overrides?: CallOverrides): Promise<string>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    houseContract(overrides?: CallOverrides): Promise<string>;

    oddsAndEvenContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBet(
      playerHand: PromiseOrValue<BigNumberish>,
      playerGuess: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BettingContract.BetStructOutput]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFlyFlutterCoinContract(
      _flyFlutterCoinContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHouseContract(
      _houseContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOddsAndEvenContract(
      _oddsAndEvenContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorWallet(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    waitingCloseBet(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BetPlaced(uint256,address,uint8,uint8,uint8)"(
      newBetId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      playerHand?: null,
      playerGuess?: null,
      betAmount?: null
    ): BetPlacedEventFilter;
    BetPlaced(
      newBetId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      playerHand?: null,
      playerGuess?: null,
      betAmount?: null
    ): BetPlacedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReceivedUint256(bytes32,uint8)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      houseHand?: null
    ): ReceivedUint256EventFilter;
    ReceivedUint256(
      requestId?: PromiseOrValue<BytesLike> | null,
      houseHand?: null
    ): ReceivedUint256EventFilter;

    "RequestedUint256(bytes32)"(
      requestId?: PromiseOrValue<BytesLike> | null
    ): RequestedUint256EventFilter;
    RequestedUint256(
      requestId?: PromiseOrValue<BytesLike> | null
    ): RequestedUint256EventFilter;

    "TaskCreated(bytes32)"(taskId?: null): TaskCreatedEventFilter;
    TaskCreated(taskId?: null): TaskCreatedEventFilter;

    "TaskExecuted(bytes32)"(taskId?: null): TaskExecutedEventFilter;
    TaskExecuted(taskId?: null): TaskExecutedEventFilter;
  };

  estimateGas: {
    BET_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    GUESS_EVEN(overrides?: CallOverrides): Promise<BigNumber>;

    GUESS_ODD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FFC_BET(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_HAND(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FFC_BET(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_HAND(overrides?: CallOverrides): Promise<BigNumber>;

    airnode(overrides?: CallOverrides): Promise<BigNumber>;

    airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256(overrides?: CallOverrides): Promise<BigNumber>;

    executeTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flyFlutterCoinContract(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    houseContract(overrides?: CallOverrides): Promise<BigNumber>;

    oddsAndEvenContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBet(
      playerHand: PromiseOrValue<BigNumberish>,
      playerGuess: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFlyFlutterCoinContract(
      _flyFlutterCoinContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHouseContract(
      _houseContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOddsAndEvenContract(
      _oddsAndEvenContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sponsorWallet(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    waitingCloseBet(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BET_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUESS_EVEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUESS_ODD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FFC_BET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_HAND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FFC_BET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_HAND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpointIdUint256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flyFlutterCoinContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    houseContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oddsAndEvenContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBet(
      playerHand: PromiseOrValue<BigNumberish>,
      playerGuess: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFlyFlutterCoinContract(
      _flyFlutterCoinContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHouseContract(
      _houseContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOddsAndEvenContract(
      _oddsAndEvenContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    waitingCloseBet(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
