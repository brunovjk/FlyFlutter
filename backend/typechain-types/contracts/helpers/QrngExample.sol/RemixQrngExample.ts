/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RemixQrngExampleInterface extends utils.Interface {
  functions: {
    "airnode()": FunctionFragment;
    "airnodeRrp()": FunctionFragment;
    "endpointIdUint256()": FunctionFragment;
    "fulfillUint256(bytes32,bytes)": FunctionFragment;
    "latestRequest()": FunctionFragment;
    "makeRequestUint256()": FunctionFragment;
    "setRequestParameters(address,bytes32,address)": FunctionFragment;
    "sponsorWallet()": FunctionFragment;
    "waitingFulfillment(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "airnode"
      | "airnodeRrp"
      | "endpointIdUint256"
      | "fulfillUint256"
      | "latestRequest"
      | "makeRequestUint256"
      | "setRequestParameters"
      | "sponsorWallet"
      | "waitingFulfillment"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "airnode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airnodeRrp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillUint256",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequestUint256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestParameters",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "waitingFulfillment",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "airnode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequestUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waitingFulfillment",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedUint256(bytes32,uint256)": EventFragment;
    "RequestedUint256(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedUint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUint256"): EventFragment;
}

export interface ReceivedUint256EventObject {
  requestId: string;
  response: BigNumber;
}
export type ReceivedUint256Event = TypedEvent<
  [string, BigNumber],
  ReceivedUint256EventObject
>;

export type ReceivedUint256EventFilter = TypedEventFilter<ReceivedUint256Event>;

export interface RequestedUint256EventObject {
  requestId: string;
}
export type RequestedUint256Event = TypedEvent<
  [string],
  RequestedUint256EventObject
>;

export type RequestedUint256EventFilter =
  TypedEventFilter<RequestedUint256Event>;

export interface RemixQrngExample extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RemixQrngExampleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airnode(overrides?: CallOverrides): Promise<[string]>;

    airnodeRrp(overrides?: CallOverrides): Promise<[string]>;

    endpointIdUint256(overrides?: CallOverrides): Promise<[string]>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestRequest(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { requestId: string; randomNumber: BigNumber }
    >;

    makeRequestUint256(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<[string]>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  airnode(overrides?: CallOverrides): Promise<string>;

  airnodeRrp(overrides?: CallOverrides): Promise<string>;

  endpointIdUint256(overrides?: CallOverrides): Promise<string>;

  fulfillUint256(
    requestId: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestRequest(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { requestId: string; randomNumber: BigNumber }
  >;

  makeRequestUint256(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequestParameters(
    _airnode: PromiseOrValue<string>,
    _endpointIdUint256: PromiseOrValue<BytesLike>,
    _sponsorWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sponsorWallet(overrides?: CallOverrides): Promise<string>;

  waitingFulfillment(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    airnode(overrides?: CallOverrides): Promise<string>;

    airnodeRrp(overrides?: CallOverrides): Promise<string>;

    endpointIdUint256(overrides?: CallOverrides): Promise<string>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestRequest(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { requestId: string; randomNumber: BigNumber }
    >;

    makeRequestUint256(overrides?: CallOverrides): Promise<void>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorWallet(overrides?: CallOverrides): Promise<string>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ReceivedUint256(bytes32,uint256)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      response?: null
    ): ReceivedUint256EventFilter;
    ReceivedUint256(
      requestId?: PromiseOrValue<BytesLike> | null,
      response?: null
    ): ReceivedUint256EventFilter;

    "RequestedUint256(bytes32)"(
      requestId?: PromiseOrValue<BytesLike> | null
    ): RequestedUint256EventFilter;
    RequestedUint256(
      requestId?: PromiseOrValue<BytesLike> | null
    ): RequestedUint256EventFilter;
  };

  estimateGas: {
    airnode(overrides?: CallOverrides): Promise<BigNumber>;

    airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestRequest(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequestUint256(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sponsorWallet(overrides?: CallOverrides): Promise<BigNumber>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airnode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpointIdUint256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillUint256(
      requestId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeRequestUint256(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequestParameters(
      _airnode: PromiseOrValue<string>,
      _endpointIdUint256: PromiseOrValue<BytesLike>,
      _sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waitingFulfillment(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
