/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Betting,
  BettingInterface,
} from "../../../contracts/Betting.sol/Betting";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_qrngFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_airnodeRrp",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_automate",
        type: "address",
      },
      {
        internalType: "address",
        name: "_flyFlutterCoinContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_fundsOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_houseContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oddsAndEvenContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AddressIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedFundSponsorWallet",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectFeeAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBetAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPlayerGuess",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPlayerHand",
    type: "error",
  },
  {
    inputs: [],
    name: "NoFundsToWithdraw",
    type: "error",
  },
  {
    inputs: [],
    name: "ReceiveBetFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestIdNotKnown",
    type: "error",
  },
  {
    inputs: [],
    name: "SendBetFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SetWinnerFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "playerHand",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "playerGuess",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "betAmount",
        type: "uint8",
      },
    ],
    name: "BetPlaced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "houseHand",
        type: "uint8",
      },
    ],
    name: "ReceivedUint256",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "RequestedUint256",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "TaskCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "string",
        name: "winner",
        type: "string",
      },
    ],
    name: "TaskExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "GUESS_EVEN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GUESS_ODD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_FFC_BET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_HAND",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_FFC_BET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_HAND",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "airnode",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "airnodeRrp",
    outputs: [
      {
        internalType: "contract IAirnodeRrpV0",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "automate",
    outputs: [
      {
        internalType: "contract IAutomate",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "betFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "betIDsPerPlayer",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "bets",
    outputs: [
      {
        internalType: "address",
        name: "playerAddress",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "playerHand",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "playerGuess",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "betAmount",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "houseHand",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "waitingFulfillment",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "waitingCloseBet",
        type: "bool",
      },
      {
        internalType: "string",
        name: "winner",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "checker",
    outputs: [
      {
        internalType: "bool",
        name: "canExec",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "execPayload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dedicatedMsgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endpointIdUint256",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "flyFlutterCoinContract",
    outputs: [
      {
        internalType: "contract FlyFlutterCoin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "fulfillUint256",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fundsOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "getBetsPerPlayer",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "playerHand",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "playerGuess",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "betAmount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "houseHand",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "requestId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "taskId",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "waitingFulfillment",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "waitingCloseBet",
            type: "bool",
          },
          {
            internalType: "string",
            name: "winner",
            type: "string",
          },
        ],
        internalType: "struct Betting.Bet[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "houseContract",
    outputs: [
      {
        internalType: "contract HouseContract",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oddsAndEvenContract",
    outputs: [
      {
        internalType: "contract OddsAndEven",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "perfomTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "playerHand",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "playerGuess",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "betAmount",
        type: "uint8",
      },
    ],
    name: "placeBet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "playerHand",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "playerGuess",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "betAmount",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "houseHand",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "requestId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "taskId",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "waitingFulfillment",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "waitingCloseBet",
            type: "bool",
          },
          {
            internalType: "string",
            name: "winner",
            type: "string",
          },
        ],
        internalType: "struct Betting.Bet",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "qrngFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_betFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_qrngFee",
        type: "uint256",
      },
    ],
    name: "setFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_flyFlutterCoinContract",
        type: "address",
      },
    ],
    name: "setFlyFlutterCoinContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_houseContract",
        type: "address",
      },
    ],
    name: "setHouseContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oddsAndEvenContract",
        type: "address",
      },
    ],
    name: "setOddsAndEvenContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_airnode",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_endpointIdUint256",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_sponsorWallet",
        type: "address",
      },
    ],
    name: "setRequestParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sponsorWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "taskTreasury",
    outputs: [
      {
        internalType: "contract ITaskTreasuryUpgradable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6101406040523480156200001257600080fd5b5060405162002f1c38038062002f1c8339810160408190526200003591620003f7565b848381308962000045336200038e565b6001600160a01b0381166080819052604051632b77c09f60e21b81523060048201526001602482015263addf027c90604401600060405180830381600087803b1580156200009257600080fd5b505af1158015620000a7573d6000803e3d6000fd5b5050505050816001600160a01b031660a0816001600160a01b031681525050816001600160a01b031663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012b9190620004a0565b6001600160a01b0390811660e0526040516337b6269f60e21b8152908216600482015273c815db16d4be6ddf2685c201937905abf338f5d79063ded89a7c906024016040805180830381865afa1580156200018a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b09190620004c7565b506001600160a01b0390811660c0528381166101005260a0516040805163e60a321360e01b8152905191909216935063e60a3213925060048083019260209291908290030181865afa1580156200020b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002319190620004a0565b6001600160a01b039081166101205288925082169050620002655760405163867915ab60e01b815260040160405180910390fd5b856001600160a01b0381166200028e5760405163867915ab60e01b815260040160405180910390fd5b856001600160a01b038116620002b75760405163867915ab60e01b815260040160405180910390fd5b856001600160a01b038116620002e05760405163867915ab60e01b815260040160405180910390fd5b856001600160a01b038116620003095760405163867915ab60e01b815260040160405180910390fd5b856001600160a01b038116620003325760405163867915ab60e01b815260040160405180910390fd5b50505060019a909a555050600296909655600880546001600160a01b039485166001600160a01b0319918216179091556009805492851692821692909217909155600a8054969093169516949094179055506200050a92505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620003f457600080fd5b50565b600080600080600080600080610100898b0312156200041557600080fd5b885197506020890151965060408901516200043081620003de565b60608a01519096506200044381620003de565b60808a01519095506200045681620003de565b60a08a01519094506200046981620003de565b60c08a01519093506200047c81620003de565b60e08a01519092506200048f81620003de565b809150509295985092959890939650565b600060208284031215620004b357600080fd5b8151620004c081620003de565b9392505050565b60008060408385031215620004db57600080fd5b8251620004e881620003de565b60208401519092508015158114620004ff57600080fd5b809150509250929050565b60805160a05160c05160e05161010051610120516129916200058b60003960006106a30152600061045b01526000818161188e015261195301526000818161031c0152610c25015260008181610226015281816117dd01528181611d350152611e3401526000818161050501528181610ab001526119de01526129916000f3fe6080604052600436106102085760003560e01c8063715018a611610118578063b3f81a57116100a0578063cdcf4aad1161006f578063cdcf4aad1461065b578063db0fdb8814610671578063e60a321314610691578063f2fde38b146106c5578063fb807629146102e057600080fd5b8063b3f81a57146105d0578063b51412d4146105e5578063bf90fb4e14610605578063c902c3ae1461062557600080fd5b80637bdf2525116100e75780637bdf25251461055c578063841e6ce91461057c5780638da5cb5b14610592578063a36ff4d8146105b0578063b3bd367c146105d057600080fd5b8063715018a6146104de57806371bab666146104f35780637592d19c1461052757806375a56c7a1461054757600080fd5b806331e7742e1161019b5780633f555c721161016a5780633f555c72146103cb57806346ee3c5914610449578063499ff5d11461047d5780635c22aa691461049d5780635c822077146104bd57600080fd5b806331e7742e1461033e5780633268df6f1461036b5780633718d90a1461038b57806338014045146103ab57600080fd5b80631896dc0f116101d75780631896dc0f146102cb578063224e2fdd146102e057806324600fc3146102f557806328f150eb1461030a57600080fd5b8063049aacfe1461021457806307b9fc57146102655780630b78f9c0146102895780630fdc0744146102ab57600080fd5b3661020f57005b600080fd5b34801561022057600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027157600080fd5b5061027b60045481565b60405190815260200161025c565b34801561029557600080fd5b506102a96102a4366004612108565b6106e5565b005b3480156102b757600080fd5b506102a96102c636600461213f565b6106f8565b3480156102d757600080fd5b5061027b606381565b3480156102ec57600080fd5b5061027b600081565b34801561030157600080fd5b506102a961074b565b34801561031657600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b34801561034a57600080fd5b5061035e61035936600461215c565b6107e3565b60405161025c9190612296565b34801561037757600080fd5b5061027b61038636600461215c565b610a74565b34801561039757600080fd5b506102a96103a63660046122f8565b610aa5565b3480156103b757600080fd5b506102a96103c636600461213f565b610bc7565b3480156103d757600080fd5b5061043b6103e6366004612374565b60008181526006602090815260409182902060030154825160248082019590955283518082039095018552604401909252820180516001600160e01b031663499ff5d160e01b17905260ff6101009091041691565b60405161025c92919061238d565b34801561045557600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b34801561048957600080fd5b506102a9610498366004612374565b610c1a565b3480156104a957600080fd5b50600954610248906001600160a01b031681565b6104d06104cb3660046123be565b610d40565b60405161025c929190612401565b3480156104ea57600080fd5b506102a96111d9565b3480156104ff57600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b34801561053357600080fd5b50600a54610248906001600160a01b031681565b34801561055357600080fd5b5061027b600581565b34801561056857600080fd5b506102a961057736600461241c565b6111ed565b34801561058857600080fd5b5061027b60015481565b34801561059e57600080fd5b506000546001600160a01b0316610248565b3480156105bc57600080fd5b50600354610248906001600160a01b031681565b3480156105dc57600080fd5b5061027b600181565b3480156105f157600080fd5b50600854610248906001600160a01b031681565b34801561061157600080fd5b50600554610248906001600160a01b031681565b34801561063157600080fd5b50610645610640366004612374565b61127b565b60405161025c9a9998979695949392919061245e565b34801561066757600080fd5b5061027b60025481565b34801561067d57600080fd5b506102a961068c36600461213f565b611377565b34801561069d57600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d157600080fd5b506102a96106e036600461213f565b6113ca565b6106ed611443565b600191909155600255565b806001600160a01b0381166107205760405163867915ab60e01b815260040160405180910390fd5b610728611443565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b610753611443565b476000819003610776576040516367e3990d60e01b815260040160405180910390fd5b604051600090339083908381818185875af1925050503d80600081146107b8576040519150601f19603f3d011682016040523d82523d6000602084013e6107bd565b606091505b50509050806107df576040516327fcd9d160e01b815260040160405180910390fd5b5050565b6001600160a01b0382166000908152600760209081526040808320805482518185028101850190935280835260609493849392919083018282801561084757602002820191906000526020600020905b815481526020019060010190808311610833575b50505050509050838151111561085f57839150610864565b805191505b60008267ffffffffffffffff81111561087f5761087f6124d3565b6040519080825280602002602001820160405280156108b857816020015b6108a56120b2565b81526020019060019003908161089d5790505b50905060005b83811015610a685760008382600186516108d891906124ff565b6108e291906124ff565b815181106108f2576108f2612512565b60209081029190910181015160008181526006835260409081902081516101408101835281546001600160a01b038116825260ff600160a01b8204811696830196909652600160a81b8104861693820193909352600160b01b830485166060820152600160b81b90920484166080830152600181015460a0830152600281015460c08301526003810154808516151560e084015261010090819004909416151593820193909352600483018054929450909291610120840191906109b590612528565b80601f01602080910402602001604051908101604052809291908181526020018280546109e190612528565b8015610a2e5780601f10610a0357610100808354040283529160200191610a2e565b820191906000526020600020905b815481529060010190602001808311610a1157829003601f168201915b505050505081525050838381518110610a4957610a49612512565b6020026020010181905250508080610a6090612562565b9150506108be565b50925050505b92915050565b60076020528160005260406000208181548110610a9057600080fd5b90600052602060002001600091509150505481565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b1b5760405162461bcd60e51b8152602060048201526016602482015275043616c6c6572206e6f74204169726e6f6465205252560541b60448201526064015b60405180910390fd5b60008381526006602052604090206003015460ff16610b4d5760405163bc2206b960e01b815260040160405180910390fd5b6000610b59838361149d565b600085815260066020526040808220805460ff8516600160b81b810260ff60b81b199092169190911782556003909101805461ffff191661010017905590519293509186917f13c7aadfce2d7e5981fe9fb6f061fd6792c9b61b5100be84405f427af826348391a350505050565b806001600160a01b038116610bef5760405163867915ab60e01b815260040160405180910390fd5b610bf7611443565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c925760405162461bcd60e51b815260206004820152601960248201527f4f6e6c7920646564696361746564206d73672e73656e646572000000000000006044820152606401610b12565b600081815260066020526040902060030154610100900460ff1615610d2257600080610cbd836114be565b9150915081610cdf576040516367afe8ef60e01b815260040160405180910390fd5b80604051610ced919061257b565b6040519081900381209084907f14b9dea92e96e8e43714c3fa68127994a5663bd62e2629e1576be3da1ba6547e90600090a350505b600080610d2d6117d8565b91509150610d3b8282611865565b505050565b6000610d4a6120b2565b6001543414610d6c57604051631fbbed9560e01b815260040160405180910390fd5b60058560ff161115610d915760405163490832f160e11b815260040160405180910390fd5b60018460ff1614158015610da7575060ff841615155b15610dc557604051636089badf60e01b815260040160405180910390fd5b60018360ff161080610dda575060638360ff16115b15610df857604051639de3d44160e01b815260040160405180910390fd5b6005546002546040516000926001600160a01b031691908381818185875af1925050503d8060008114610e47576040519150601f19603f3d011682016040523d82523d6000602084013e610e4c565b606091505b5050905080610e6e5760405163080fba3760e31b815260040160405180910390fd5b6000610e78611978565b90506000610e8582611a7d565b90506000604051806101400160405280336001600160a01b031681526020018a60ff1681526020018960ff1681526020018860ff168152602001606360ff168152602001848152602001838152602001600115158152602001600015158152602001604051806020016040528060008152508152509050806006600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160000160156101000a81548160ff021916908360ff16021790555060608201518160000160166101000a81548160ff021916908360ff16021790555060808201518160000160176101000a81548160ff021916908360ff16021790555060a0820151816001015560c0820151816002015560e08201518160030160006101000a81548160ff0219169083151502179055506101008201518160030160016101000a81548160ff02191690831515021790555061012082015181600401908161102c91906125e5565b50503360008181526007602090815260408083208054600181018255908452919092200186905560085460095491516323b872dd60e01b815260048101939093526001600160a01b03918216602484015260ff8b1660448401521691506323b872dd906064016020604051808303816000875af11580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d591906126a5565b6110f2576040516312171d8360e31b815260040160405180910390fd5b60095460405163611296d560e11b815260ff891660048201526001600160a01b039091169063c2252daa906024016020604051808303816000875af115801561113f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116391906126a5565b6111805760405163e6a231e960e01b815260040160405180910390fd5b6040805160ff8b811682528a811660208301528916818301529051339185917f8e8f597283d6b081eab265de844ff841bd65c761222c746755ec1c47941363449181900360600190a36001999098509650505050505050565b6111e1611443565b6111eb6000611ccf565b565b826001600160a01b0381166112155760405163867915ab60e01b815260040160405180910390fd5b816001600160a01b03811661123d5760405163867915ab60e01b815260040160405180910390fd5b611245611443565b5050600380546001600160a01b039485166001600160a01b03199182161790915560049290925560058054919093169116179055565b600660205260009081526040902080546001820154600283015460038401546004850180546001600160a01b0386169660ff600160a01b8804811697600160a81b8104821697600160b01b8204831697600160b81b9092048316969095919481841694610100909204909316929091906112f490612528565b80601f016020809104026020016040519081016040528092919081815260200182805461132090612528565b801561136d5780601f106113425761010080835404028352916020019161136d565b820191906000526020600020905b81548152906001019060200180831161135057829003601f168201915b505050505090508a565b806001600160a01b03811661139f5760405163867915ab60e01b815260040160405180910390fd5b6113a7611443565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6113d2611443565b6001600160a01b0381166114375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b12565b61144081611ccf565b50565b6000546001600160a01b031633146111eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b12565b600060056114ad83850185612374565b6114b791906126c7565b9392505050565b600a546000828152600660205260408082205490516304b47eb560e01b815260ff600160a01b830481166004830152600160a81b830481166024830152600160b81b909204909116604482015290916060916001600160a01b03909116906304b47eb590606401600060405180830381865afa158015611542573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261156a91908101906126e9565b90506040518060400160405280600b81526020016a506c617965722077696e7360a81b8152506040516020016115a0919061257b565b60405160208183030381529060405280519060200120816040516020016115c7919061257b565b604051602081830303815290604052805190602001200361178a5760008381526006602052604090206004016115fd82826125e5565b506008546009546000858152600660205260409020546001600160a01b03928316926323b872dd928116919081169061164190600160b01b900460ff16600261278b565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260ff1660448201526064016020604051808303816000875af1158015611698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bc91906126a5565b6116d9576040516312171d8360e31b815260040160405180910390fd5b60095460008481526006602052604090819020549051632209e99160e01b81526001600160a01b038083166004830152600160b01b90920460ff166024820152911690632209e991906044016020604051808303816000875af1158015611744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176891906126a5565b6117855760405163334c4a9960e01b815260040160405180910390fd5b6117a7565b60008381526006602052604090206004016117a582826125e5565b505b600083815260066020526040902060038101805461ff001916905560020154600192506117d390611d1f565b915091565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015611838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185c91906127ae565b90939092509050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0382160161194d5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360405160006040518083038185875af1925050503d80600081146118f7576040519150601f19603f3d011682016040523d82523d6000602084013e6118fc565b606091505b5050905080610d3b5760405162461bcd60e51b815260206004820152601e60248201527f5f7472616e736665723a20455448207472616e73666572206661696c656400006044820152606401610b12565b6107df817f000000000000000000000000000000000000000000000000000000000000000084611d9c565b60035460048054600554604051636e6be03f60e01b81526001600160a01b03948516938101939093526024830191909152306044830181905290831660648301526084820152631b8c6c8560e11b60a482015260e060c4820152600060e48201819052917f00000000000000000000000000000000000000000000000000000000000000001690636e6be03f90610104016020604051808303816000875af1158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c91906127de565b60405190915081907fcba2da2f3c0c732a104019a3104936397dde7343964c1518ceb760052e4537b190600090a290565b6000806040518060400160405280600267ffffffffffffffff811115611aa557611aa56124d3565b604051908082528060200260200182016040528015611ace578160200160208202803683370190505b5081526040805160028082526060820190925260209092019190816020015b6060815260200190600190039081611aed5750509052805180519192506000918290611b1b57611b1b612512565b60200260200101906003811115611b3457611b346127f7565b90816003811115611b4757611b476127f7565b8152505060028160000151600181518110611b6457611b64612512565b60200260200101906003811115611b7d57611b7d6127f7565b90816003811115611b9057611b906127f7565b81525050611bec30306001600160a01b0316633f555c7286604051602401611bba91815260200190565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611dee565b8160200151600081518110611c0357611c03612512565b6020026020010181905250611c2360408051602081019091526000815290565b8160200151600181518110611c3a57611c3a612512565b6020026020010181905250611c9b3063499ff5d160e01b604051602001611c7191906001600160e01b031991909116815260200190565b6040516020818303038152906040528373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611e1a565b60405190925083907f1e28175955a872c8252a6e5cf36ac6b318d074eb78b49731e5cb9ddc2d870b6390600090a250919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405163ee8ca3b560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ee8ca3b590602401600060405180830381600087803b158015611d8157600080fd5b505af1158015611d95573d6000803e3d6000fd5b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610d3b908490611ebd565b60608282604051602001611e0392919061280d565b604051602081830303815290604052905092915050565b604051633323b46760e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633323b46790611e6f908890889088908890600401612886565b6020604051808303816000875af1158015611e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb291906127de565b90505b949350505050565b6000611f12826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f8f9092919063ffffffff16565b805190915015610d3b5780806020019051810190611f3091906126a5565b610d3b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b12565b6060611eb5848460008585600080866001600160a01b03168587604051611fb6919061257b565b60006040518083038185875af1925050503d8060008114611ff3576040519150601f19603f3d011682016040523d82523d6000602084013e611ff8565b606091505b509150915061200987838387612014565b979650505050505050565b6060831561208357825160000361207c576001600160a01b0385163b61207c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b12565b5081611eb5565b611eb583838151156120985781518083602001fd5b8060405162461bcd60e51b8152600401610b129190612948565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082019290925261012081019190915290565b6000806040838503121561211b57600080fd5b50508035926020909101359150565b6001600160a01b038116811461144057600080fd5b60006020828403121561215157600080fd5b81356114b78161212a565b6000806040838503121561216f57600080fd5b823561217a8161212a565b946020939093013593505050565b60005b838110156121a357818101518382015260200161218b565b50506000910152565b600081518084526121c4816020860160208601612188565b601f01601f19169290920160200192915050565b80516001600160a01b03168252600061014060208301516121fe602086018260ff169052565b506040830151612213604086018260ff169052565b506060830151612228606086018260ff169052565b50608083015161223d608086018260ff169052565b5060a083015160a085015260c083015160c085015260e083015161226560e086018215159052565b50610100838101511515908501526101208084015181860183905261228c838701826121ac565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122eb57603f198886030184526122d98583516121d8565b945092850192908501906001016122bd565b5092979650505050505050565b60008060006040848603121561230d57600080fd5b83359250602084013567ffffffffffffffff8082111561232c57600080fd5b818601915086601f83011261234057600080fd5b81358181111561234f57600080fd5b87602082850101111561236157600080fd5b6020830194508093505050509250925092565b60006020828403121561238657600080fd5b5035919050565b8215158152604060208201526000611eb560408301846121ac565b803560ff811681146123b957600080fd5b919050565b6000806000606084860312156123d357600080fd5b6123dc846123a8565b92506123ea602085016123a8565b91506123f8604085016123a8565b90509250925092565b8215158152604060208201526000611eb560408301846121d8565b60008060006060848603121561243157600080fd5b833561243c8161212a565b92506020840135915060408401356124538161212a565b809150509250925092565b600061014060018060a01b038d16835260ff8c16602084015260ff8b16604084015260ff8a16606084015260ff891660808401528760a08401528660c084015285151560e0840152841515610100840152806101208401526124c2818401856121ac565b9d9c50505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610a6e57610a6e6124e9565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061253c57607f821691505b60208210810361255c57634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201612574576125746124e9565b5060010190565b6000825161258d818460208701612188565b9190910192915050565b601f821115610d3b57600081815260208120601f850160051c810160208610156125be5750805b601f850160051c820191505b818110156125dd578281556001016125ca565b505050505050565b815167ffffffffffffffff8111156125ff576125ff6124d3565b6126138161260d8454612528565b84612597565b602080601f83116001811461264857600084156126305750858301515b600019600386901b1c1916600185901b1785556125dd565b600085815260208120601f198616915b8281101561267757888601518255948401946001909101908401612658565b50858210156126955787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156126b757600080fd5b815180151581146114b757600080fd5b6000826126e457634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156126fb57600080fd5b815167ffffffffffffffff8082111561271357600080fd5b818401915084601f83011261272757600080fd5b815181811115612739576127396124d3565b604051601f8201601f19908116603f01168101908382118183101715612761576127616124d3565b8160405282815287602084870101111561277a57600080fd5b612009836020830160208801612188565b60ff81811683821602908116908181146127a7576127a76124e9565b5092915050565b600080604083850312156127c157600080fd5b8251915060208301516127d38161212a565b809150509250929050565b6000602082840312156127f057600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0383168152604060208201819052600090611eb5908301846121ac565b600081518084526020808501808196508360051b8101915082860160005b858110156128795782840389526128678483516121ac565b9885019893509084019060010161284f565b5091979650505050505050565b6001600160a01b0385168152608060208083018290526000916128ab908401876121ac565b838103604080860191909152865181835280519183018290528301906000906060840190825b8181101561290a57845160048082106128f757634e487b7160e01b865260218152602486fd5b50835293860193918601916001016128d1565b5050848901519250838103858501526129238184612831565b9550505050505061293f60608301846001600160a01b03169052565b95945050505050565b6020815260006114b760208301846121ac56fea26469706673582212205be0b22cc2dd29eb8c82ed3bfd3322ba1c626bdb44d058bf12a478fb33c2cfb464736f6c63430008130033";

type BettingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BettingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Betting__factory extends ContractFactory {
  constructor(...args: BettingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _betFee: PromiseOrValue<BigNumberish>,
    _qrngFee: PromiseOrValue<BigNumberish>,
    _airnodeRrp: PromiseOrValue<string>,
    _automate: PromiseOrValue<string>,
    _flyFlutterCoinContract: PromiseOrValue<string>,
    _fundsOwner: PromiseOrValue<string>,
    _houseContract: PromiseOrValue<string>,
    _oddsAndEvenContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Betting> {
    return super.deploy(
      _betFee,
      _qrngFee,
      _airnodeRrp,
      _automate,
      _flyFlutterCoinContract,
      _fundsOwner,
      _houseContract,
      _oddsAndEvenContract,
      overrides || {}
    ) as Promise<Betting>;
  }
  override getDeployTransaction(
    _betFee: PromiseOrValue<BigNumberish>,
    _qrngFee: PromiseOrValue<BigNumberish>,
    _airnodeRrp: PromiseOrValue<string>,
    _automate: PromiseOrValue<string>,
    _flyFlutterCoinContract: PromiseOrValue<string>,
    _fundsOwner: PromiseOrValue<string>,
    _houseContract: PromiseOrValue<string>,
    _oddsAndEvenContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _betFee,
      _qrngFee,
      _airnodeRrp,
      _automate,
      _flyFlutterCoinContract,
      _fundsOwner,
      _houseContract,
      _oddsAndEvenContract,
      overrides || {}
    );
  }
  override attach(address: string): Betting {
    return super.attach(address) as Betting;
  }
  override connect(signer: Signer): Betting__factory {
    return super.connect(signer) as Betting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BettingInterface {
    return new utils.Interface(_abi) as BettingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Betting {
    return new Contract(address, _abi, signerOrProvider) as Betting;
  }
}
