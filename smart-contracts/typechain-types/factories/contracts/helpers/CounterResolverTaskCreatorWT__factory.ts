/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CounterResolverTaskCreatorWT,
  CounterResolverTaskCreatorWTInterface,
} from "../../../contracts/helpers/CounterResolverTaskCreatorWT";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_automate",
        type: "address",
      },
      {
        internalType: "address",
        name: "_fundsOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
    ],
    name: "CounterTaskCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "automate",
    outputs: [
      {
        internalType: "contract IAutomate",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "checker",
    outputs: [
      {
        internalType: "bool",
        name: "canExec",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "execPayload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "createTask",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "dedicatedMsgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundsOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "perfomTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "taks",
    outputs: [
      {
        internalType: "string",
        name: "taskAccomplished",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "waitingPerformTask",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "taksIdPerAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "taskTreasury",
    outputs: [
      {
        internalType: "contract ITaskTreasuryUpgradable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "testPerfomTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type CounterResolverTaskCreatorWTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterResolverTaskCreatorWTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CounterResolverTaskCreatorWT__factory extends ContractFactory {
  constructor(...args: CounterResolverTaskCreatorWTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _automate: PromiseOrValue<string>,
    _fundsOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CounterResolverTaskCreatorWT> {
    return super.deploy(
      _automate,
      _fundsOwner,
      overrides || {}
    ) as Promise<CounterResolverTaskCreatorWT>;
  }
  override getDeployTransaction(
    _automate: PromiseOrValue<string>,
    _fundsOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_automate, _fundsOwner, overrides || {});
  }
  override attach(address: string): CounterResolverTaskCreatorWT {
    return super.attach(address) as CounterResolverTaskCreatorWT;
  }
  override connect(signer: Signer): CounterResolverTaskCreatorWT__factory {
    return super.connect(signer) as CounterResolverTaskCreatorWT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterResolverTaskCreatorWTInterface {
    return new utils.Interface(_abi) as CounterResolverTaskCreatorWTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CounterResolverTaskCreatorWT {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CounterResolverTaskCreatorWT;
  }
}
