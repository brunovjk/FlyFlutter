/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DummyBetting,
  DummyBettingInterface,
} from "../../../../contracts/helpers/DummyBetting.sol/DummyBetting";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "houseAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "receiveBet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendBet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161047838038061047883398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61038c806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632209e9911461005c578063715018a6146100715780638da5cb5b14610079578063c2252daa14610098578063f2fde38b146100ab575b600080fd5b61006f61006a3660046102f1565b6100be565b005b61006f610130565b600054604080516001600160a01b039092168252519081900360200190f35b61006f6100a636600461031b565b610144565b61006f6100b9366004610334565b6101ad565b6100c661022b565b600154604051632209e99160e01b81526001600160a01b0384811660048301526024820184905290911690632209e99190604401600060405180830381600087803b15801561011457600080fd5b505af1158015610128573d6000803e3d6000fd5b505050505050565b61013861022b565b6101426000610285565b565b61014c61022b565b60015460405163611296d560e11b8152600481018390526001600160a01b039091169063c2252daa90602401600060405180830381600087803b15801561019257600080fd5b505af11580156101a6573d6000803e3d6000fd5b5050505050565b6101b561022b565b6001600160a01b03811661021f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61022881610285565b50565b6000546001600160a01b031633146101425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610216565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146102ec57600080fd5b919050565b6000806040838503121561030457600080fd5b61030d836102d5565b946020939093013593505050565b60006020828403121561032d57600080fd5b5035919050565b60006020828403121561034657600080fd5b61034f826102d5565b939250505056fea2646970667358221220a2f4ac7b9a6badca36ed5ec8829530d6b3f4305ac8a73763478feced3930e76564736f6c63430008130033";

type DummyBettingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyBettingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyBetting__factory extends ContractFactory {
  constructor(...args: DummyBettingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    houseAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DummyBetting> {
    return super.deploy(houseAddress, overrides || {}) as Promise<DummyBetting>;
  }
  override getDeployTransaction(
    houseAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(houseAddress, overrides || {});
  }
  override attach(address: string): DummyBetting {
    return super.attach(address) as DummyBetting;
  }
  override connect(signer: Signer): DummyBetting__factory {
    return super.connect(signer) as DummyBetting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyBettingInterface {
    return new utils.Interface(_abi) as DummyBettingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyBetting {
    return new Contract(address, _abi, signerOrProvider) as DummyBetting;
  }
}
