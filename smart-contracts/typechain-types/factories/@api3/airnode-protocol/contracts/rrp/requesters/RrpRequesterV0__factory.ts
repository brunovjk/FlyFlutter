/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  RrpRequesterV0,
  RrpRequesterV0Interface,
} from "../../../../../../@api3/airnode-protocol/contracts/rrp/requesters/RrpRequesterV0";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_airnodeRrp",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "airnodeRrp",
    outputs: [
      {
        internalType: "contract IAirnodeRrpV0",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161018638038061018683398101604081905261002f91610099565b6001600160a01b0381166080819052604051632b77c09f60e21b81523060048201526001602482015263addf027c90604401600060405180830381600087803b15801561007b57600080fd5b505af115801561008f573d6000803e3d6000fd5b50505050506100c9565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b60805160a56100e160003960006031015260a56000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806371bab66614602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220a21c8e83bd30cd094039e82c12d0f9e0e536c60b37ccf05c41d9f4427f03d51964736f6c63430008130033";

type RrpRequesterV0ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RrpRequesterV0ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RrpRequesterV0__factory extends ContractFactory {
  constructor(...args: RrpRequesterV0ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _airnodeRrp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RrpRequesterV0> {
    return super.deploy(
      _airnodeRrp,
      overrides || {}
    ) as Promise<RrpRequesterV0>;
  }
  override getDeployTransaction(
    _airnodeRrp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_airnodeRrp, overrides || {});
  }
  override attach(address: string): RrpRequesterV0 {
    return super.attach(address) as RrpRequesterV0;
  }
  override connect(signer: Signer): RrpRequesterV0__factory {
    return super.connect(signer) as RrpRequesterV0__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RrpRequesterV0Interface {
    return new utils.Interface(_abi) as RrpRequesterV0Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RrpRequesterV0 {
    return new Contract(address, _abi, signerOrProvider) as RrpRequesterV0;
  }
}
