/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IWithdrawalUtilsV0Interface extends utils.Interface {
  functions: {
    "fulfillWithdrawal(bytes32,address,address)": FunctionFragment;
    "requestWithdrawal(address,address)": FunctionFragment;
    "sponsorToWithdrawalRequestCount(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fulfillWithdrawal"
      | "requestWithdrawal"
      | "sponsorToWithdrawalRequestCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfillWithdrawal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorToWithdrawalRequestCount",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorToWithdrawalRequestCount",
    data: BytesLike
  ): Result;

  events: {
    "FulfilledWithdrawal(address,address,bytes32,address,uint256)": EventFragment;
    "RequestedWithdrawal(address,address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FulfilledWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedWithdrawal"): EventFragment;
}

export interface FulfilledWithdrawalEventObject {
  airnode: string;
  sponsor: string;
  withdrawalRequestId: string;
  sponsorWallet: string;
  amount: BigNumber;
}
export type FulfilledWithdrawalEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  FulfilledWithdrawalEventObject
>;

export type FulfilledWithdrawalEventFilter =
  TypedEventFilter<FulfilledWithdrawalEvent>;

export interface RequestedWithdrawalEventObject {
  airnode: string;
  sponsor: string;
  withdrawalRequestId: string;
  sponsorWallet: string;
}
export type RequestedWithdrawalEvent = TypedEvent<
  [string, string, string, string],
  RequestedWithdrawalEventObject
>;

export type RequestedWithdrawalEventFilter =
  TypedEventFilter<RequestedWithdrawalEvent>;

export interface IWithdrawalUtilsV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWithdrawalUtilsV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfillWithdrawal(
      withdrawalRequestId: PromiseOrValue<BytesLike>,
      airnode: PromiseOrValue<string>,
      sponsor: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      airnode: PromiseOrValue<string>,
      sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sponsorToWithdrawalRequestCount(
      sponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawalRequestCount: BigNumber }>;
  };

  fulfillWithdrawal(
    withdrawalRequestId: PromiseOrValue<BytesLike>,
    airnode: PromiseOrValue<string>,
    sponsor: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    airnode: PromiseOrValue<string>,
    sponsorWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sponsorToWithdrawalRequestCount(
    sponsor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    fulfillWithdrawal(
      withdrawalRequestId: PromiseOrValue<BytesLike>,
      airnode: PromiseOrValue<string>,
      sponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawal(
      airnode: PromiseOrValue<string>,
      sponsorWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorToWithdrawalRequestCount(
      sponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FulfilledWithdrawal(address,address,bytes32,address,uint256)"(
      airnode?: PromiseOrValue<string> | null,
      sponsor?: PromiseOrValue<string> | null,
      withdrawalRequestId?: PromiseOrValue<BytesLike> | null,
      sponsorWallet?: null,
      amount?: null
    ): FulfilledWithdrawalEventFilter;
    FulfilledWithdrawal(
      airnode?: PromiseOrValue<string> | null,
      sponsor?: PromiseOrValue<string> | null,
      withdrawalRequestId?: PromiseOrValue<BytesLike> | null,
      sponsorWallet?: null,
      amount?: null
    ): FulfilledWithdrawalEventFilter;

    "RequestedWithdrawal(address,address,bytes32,address)"(
      airnode?: PromiseOrValue<string> | null,
      sponsor?: PromiseOrValue<string> | null,
      withdrawalRequestId?: PromiseOrValue<BytesLike> | null,
      sponsorWallet?: null
    ): RequestedWithdrawalEventFilter;
    RequestedWithdrawal(
      airnode?: PromiseOrValue<string> | null,
      sponsor?: PromiseOrValue<string> | null,
      withdrawalRequestId?: PromiseOrValue<BytesLike> | null,
      sponsorWallet?: null
    ): RequestedWithdrawalEventFilter;
  };

  estimateGas: {
    fulfillWithdrawal(
      withdrawalRequestId: PromiseOrValue<BytesLike>,
      airnode: PromiseOrValue<string>,
      sponsor: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      airnode: PromiseOrValue<string>,
      sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sponsorToWithdrawalRequestCount(
      sponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfillWithdrawal(
      withdrawalRequestId: PromiseOrValue<BytesLike>,
      airnode: PromiseOrValue<string>,
      sponsor: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      airnode: PromiseOrValue<string>,
      sponsorWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sponsorToWithdrawalRequestCount(
      sponsor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
